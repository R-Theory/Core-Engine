{"tasks": [{"task_id": "1", "dependent_task_ids": [], "instruction": "Create a comprehensive Product Requirements Document (PRD) for the AI-powered \"Core Engine\" MVP. The PRD should include:\n\n1. Detailed feature specifications for all 7 MVP goals:\n   - Modular API & Plugin System with JSON/YAML manifest schema\n   - Pluggable AI Agent Framework for LLM integration\n   - Course-Centric Intelligence \"Live Map\" system\n   - Resource, Media, & Project Management\n   - Basic Workflow Automation with builder interface\n   - Clean Front-End Dashboard with specified pages\n   - Production-Ready Practices and deployment requirements\n\n2. Technical requirements and constraints:\n   - Tech stack: Next.js frontend, FastAPI backend, PostgreSQL database\n   - Docker containerization requirements\n   - Authentication and security specifications\n   - Plugin manifest format and loading system\n   - AI agent orchestration requirements\n\n3. User stories and acceptance criteria for each major feature\n4. API specifications and data models\n5. Plugin integration requirements for Canvas, GitHub, Google Drive\n6. Workflow automation examples and requirements\n7. UI/UX specifications for dashboard, course map, resource vault, workflow studio\n\nSave the PRD as a markdown file at /workspace/docs/prd.md for the architect to reference.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Emma", "start_at": 1757543473.8325205}, {"task_id": "2", "dependent_task_ids": ["1"], "instruction": "Design a comprehensive system architecture for the AI-powered \"Core Engine\" MVP based on the PRD at /workspace/docs/prd.md. The system design should include:\n\n1. Overall system architecture with modular components:\n   - Backend API architecture (FastAPI)\n   - Frontend architecture (Next.js)\n   - Database schema design (PostgreSQL)\n   - Plugin system architecture\n   - AI agent framework design\n\n2. Detailed component specifications:\n   - Plugin manifest format and loading system\n   - Agent orchestration API design\n   - Course/topic/assignment data models\n   - Resource management system\n   - Workflow automation engine\n   - Authentication and security layer\n\n3. API endpoint specifications\n4. Database schema with relationships\n5. Plugin interface definitions\n6. Docker containerization strategy\n7. Deployment architecture with docker-compose\n\nSave the system design as a markdown file at /workspace/docs/system_design.md for the engineer to implement.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Bob"}, {"task_id": "3", "dependent_task_ids": ["2"], "instruction": "Implement the complete AI-powered \"Core Engine\" MVP based on the system design at /workspace/docs/system_design.md and PRD at /workspace/docs/prd.md. \n\nBuild the full-stack application with:\n\n1. Backend (FastAPI):\n   - Modular plugin system with manifest parsing and dynamic loading\n   - AI agent framework with orchestration API\n   - Course/topic/assignment management with \"Live Map\"\n   - Resource management with tagging and search\n   - Workflow automation engine\n   - Authentication and security implementation\n   - Plugin integrations for Canvas, GitHub, Google Drive (read-only MVP)\n\n2. Frontend (Next.js with Tailwind CSS):\n   - Dashboard with overview, inbox, upcoming tasks\n   - Courses Map with drill-down view\n   - Resource Vault with search and management\n   - Workflow Studio for building and monitoring workflows\n   - Plugin/Integration settings\n   - Profile/settings/docs/logbook pages\n\n3. Production-ready features:\n   - Docker containerization for all components\n   - docker-compose.yml for local deployment\n   - Secure authentication with OAuth flows\n   - Environment variable management for secrets\n   - Error handling and logging\n   - Unit and integration tests\n   - Seed/dummy data and testing scripts\n\n4. Documentation:\n   - Comprehensive README with setup instructions\n   - API documentation\n   - Plugin development guide\n   - Sample plugin/agent configurations\n   - Example workflow definitions\n\nStructure the code in modular folders with proper separation of concerns. Ensure the system is extensible and well-documented for future development.", "task_type": "general", "code": "", "result": "", "is_success": false, "is_finished": false, "assignee": "Alex"}], "current_task_id": "1"}

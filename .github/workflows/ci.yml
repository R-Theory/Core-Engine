name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: postgres
          POSTGRES_DB: core_engine_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black isort mypy bandit

    - name: Lint with black
      working-directory: ./backend
      run: black --check --diff .

    - name: Import sorting with isort
      working-directory: ./backend
      run: isort --check-only --diff .

    - name: Type checking with mypy
      working-directory: ./backend
      run: mypy app --ignore-missing-imports

    - name: Security linting with bandit
      working-directory: ./backend
      run: bandit -r app -f json -o bandit-report.json || true

    - name: Run tests with coverage
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:test_password@localhost:5432/core_engine_test
        REDIS_URL: redis://localhost:6379/0
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_DB: 0
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: testing
        ALLOWED_HOSTS: ["localhost", "127.0.0.1"]
      run: |
        pytest --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Lint with ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Run tests
      working-directory: ./frontend
      run: npm run test:ci

    - name: Build application
      working-directory: ./frontend
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
      run: npm run build

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Python Security Check with Safety
      working-directory: ./backend
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Node.js Security Audit
      working-directory: ./frontend
      run: |
        npm audit --audit-level=high

  # Database Migration Testing
  migration-test:
    runs-on: ubuntu-latest
    needs: backend-test
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: postgres
          POSTGRES_DB: core_engine_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test database migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:test_password@localhost:5432/core_engine_test
        SECRET_KEY: test-secret-key-for-ci
      run: |
        # Test forward migrations
        alembic upgrade head

        # Test migration rollback
        alembic downgrade base
        alembic upgrade head

  # Build and Push Images (only on main branch)
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan, migration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata (tags, labels) for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Production (only on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/core-engine
          git pull origin main

          # Update images
          docker-compose -f docker-compose.prod.yml pull

          # Run database migrations
          docker-compose -f docker-compose.prod.yml run --rm backend alembic upgrade head

          # Deploy with zero downtime using load balancer
          docker-compose -f docker-compose.loadbalancer.yml up -d --remove-orphans

          # Health check with load balancer
          sleep 30
          curl -f http://localhost/health || exit 1

          # Check monitoring stack
          docker-compose -f docker-compose.monitoring.yml up -d --remove-orphans

          # Cleanup old images
          docker image prune -f

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow